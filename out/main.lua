-- src/main.jam - GENERATED 2021-11-12, 9:54:12 p.m.
-- JAMMY BOILERPLATE
local import = require;__root_dir = "";table.length=function(a)local b=0;for c in pairs(a)do b=b+1 end;return b end;function ternary(d,a,e)if d then return a else return e end end;math.sign=function(f)return ternary(f<0,-1,1)end;unpack=unpack or table.unpack;getfenv=getfenv or debug.getfenv;function lt(g,h)return g<h end;function gt(g,h)return g>h end;function nop()end;function has_metatable(i,j)local k=getmetatable(i)while k do if k==j then return true end;k=getmetatable(k)end;return false end;function tbl(...)return{...}end;array={new=function()error("Attempted to use an array without importing array.jam. Either import arrays with `use \"std/array.jam\";` or use luatable(...) in place of your array.",2)end}groups={new=function()error("Attempted to use a group without importing group.jam. Import groups with `use \"std/group.jam\";`",2)end}function __typecheck_arg()error("Attempted to use type checks without importing types.jam. Import type checks with `use \"std/types.jam\";`",2)end;typechecks,__typecheck_arg_optional,__typecheck_arg_union,__typecheck_arg_union_optional={},__typecheck_arg,__typecheck_arg,__typecheck_arg;function len(f)return#f end;function bool(f)return not not f end;function table.merge(g,h)if g==h then return h end;if h and type(h)=="table"then local l=getmetatable(h)or{}local m=l.__index or nop;if type(m)=="table"then local n=l.__index;m=function(self,o)return n[o]end end;local g=g or{}l.__index=function(self,p)return m(self,p)or g[p]end;setmetatable(h,l)end;return h end;function __import(b,q,r)local h={}for m=1,b do h[m]=table.merge(q[m],r[m])end;return unpack(h)end;function path_join(h,d)h,d=h:gsub("\\\\","/"),d:gsub("\\\\","/")local s,t={},{}for e in h:gmatch("[^/]+")do table.insert(s,e)end;for e in d:gmatch("[^/]+")do table.insert(t,e)end;for u,v in ipairs(t)do if v==".."then s[#s]=nil else s[#s+1]=v end end;return table.concat(s,"/")end;function iter(g)local b,m,w=#g,0,{}for x,y in ipairs(g)do w[x]=y end;return function()m=m+1;if m<=b then return w[m]end end end; local exports={};__env = {};setmetatable(__env, { __index = _G });
-- END JAMMY BOILERPLATE
local array, typechecks = __import(2, {array, typechecks}, require(path_join(__root_dir, "std/array"):gsub("/", ".")));__env.array, __env.typechecks = array, typechecks;
local textGrid, typechecks = __import(2, {textGrid, typechecks}, import("textGrid"));__env.textGrid, __env.typechecks = textGrid, typechecks;
local g = love.graphics;
local frameRate = 60;
local grid = textGrid(20, 20, 600, 1000, 60, 100, 0.5);
love.load = function() g.setDefaultFilter("nearest", "nearest", 1);
frameRate = 60 end;
love.update = function(delta) frameRate = (frameRate+(((1/(delta-frameRate))*0.05))) end;
love.draw = function() g.print(string.format("%.2f", frameRate), 5, 5);
grid:draw() end;
 return exports;