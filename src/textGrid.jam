use "std/types.jam";
use "std/array.jam";
-- use "std/iter.jam";
use "std/string.jam";
use "vec2.jam";

let g = love.graphics;
let y_off = FONT_SIZE / 2;
CHARS = " .'^\",:;Il!i><~+_-?][}{1)(|\\/tfjrxnuvczXYUJCLQ0OZmwqpdbkhao*#MW&8%B@$";

prototype textGrid {
    constructor: (x: number = 0, y: number = 0,
        w: number = 100, h: number = 100,
        chars_x: number = 10, chars_y: number = 10, scale: number = 1) :=>{
        
        @ar = [];
        for i in range chars_y, {
            @ar:push([]);
            for j in range chars_x, @ar#i:push(0);
        };
        @origin = vec2(x, y);
        @grid_size = vec2(chars_x, chars_y);
        @draw_size = vec2(w, h);
        @scale = scale;
    };

    draw: () :=> {
        g.rectangle("line", @origin.x - 2, @origin.y - (@scale * y_off),
            (@draw_size + vec2(4, @scale *y_off)):split!);

        g.push!;
        g.translate(@origin:split!);
        g.scale(@scale, @scale);
        let step = @draw_size / (@grid_size * @scale);

        for i in range @grid_size.y, {
            g.push!;
            for j in range @grid_size.x, {
                let n = math.floor ((len CHARS - 1) * @ar#i#j) + 1;
                g.print(CHARS:sub(n,n), FONT_SIZE / 8, -y_off);
                g.translate(step.x, 0);
            };
            g.pop!;
            g.translate(0, step.y);
        };
        g.pop!;
    };

    assign: (pos: vec2, val: number) :=> {
        pos = (pos - @origin) * @grid_size / @draw_size;
        if !pos:within @grid_size || !pos:exceeds vec2.zero, => nil;

        let x, y = pos:floor!:split!;
        -- print("setting value ${val} at position ${pos}");
        @ar#y#x = val;
    };

    __tostring: () :=> {
        let s = "";
        for i in range @grid_size.y, {
            s = s .. "\n";
            for j in range @grid_size.x, {
                let n = math.floor ((len CHARS - 1) * @ar#i#j) + 1;
                s = s .. CHARS:sub(n, n);
            };
        };
        => s;
    };
};
export textGrid;