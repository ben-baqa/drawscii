use "std/types.jam";

prototype vec2{
    constructor: (x: number = 0, y: number = 0) :=> >> @x, @y = x, y;
    copy: () :=> vec2(@split!);

    __unm: () :=> vec2(-@x, -@y);
    __add: v: vec2 :=> vec2(@x + v.x, @y + v.y);
    __sub: v: vec2 :=> @__add v.__unm!;
    __mul: (a) :=> match (let t = type(a)) {
        t == "number" => vec2(@x * a, @y * a),
        t == "table" => vec2(@x * a.x, @y * a.y),
        else @
    };
    __div: (a) :=> match (let t = type(a)) {
        t == "number" => vec2(@x / a, @y / a),
        t == "table" => vec2(@x / a.x, @y / a.y),
        else @2
    };
    __eq: v: vec2 :=> @x == v.x && @y == v.y;
    __tostring: () :=> "(${@x}, ${@y})";

    zero: vec2(0, 0);
    one: vec2(1, 1);
    right: vec2(1, 0);
    left: vec2(-1, 0);
    up: vec2(0, -1);
    down: vec2(0, 1);

    square_magnitude: () :=> >> => (@x * @x) + (@y * @y);
    magnitude: () :=> >> => math.sqrt @square_magnitude!;
    angle: () :=> math.atan2(@y,@x);

    split: () :=> (@x, @y);
    floor: () :=> vec2(math.floor(@x), math.floor(@y));
    lerp: (v:vec2, f:float) :=> @ + ((v - @) * f);
};
export vec2;