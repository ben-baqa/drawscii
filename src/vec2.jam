use "std/types.jam";
use "std/function.jam";

prototype vec2{
    constructor: (x: number = 0, y: number = 0) :=> >> @x, @y = x, y;
    copy: () :=> vec2(@split!);

    __unm: () :=> vec2(-@x, -@y);
    __add: v: vec2 :=> vec2(@x + v.x, @y + v.y);
    __sub: v: vec2 :=> @__add (-v);
    __mul: (a) :=> match (let t = type(a)) {
        t == "number" => vec2(@x * a, @y * a),
        t == "table" => vec2(@x * a.x, @y * a.y),
        else @
    };
    __div: (a) :=> match (let t = type(a)) {
        t == "number" => vec2(@x / a, @y / a),
        t == "table" => vec2(@x / a.x, @y / a.y),
        else @2
    };
    __eq: v: vec2 :=> @x == v.x && @y == v.y;
    -- __lt: v: vec2 :=> @square_magnitude! < v:square_magnitude!;
    __tostring: () :=> "(${@x}, ${@y})";

    within: v: vec2 :=> (@x < v.x) && (@y < v.y);
    exceeds: v: vec2 :=> (@x > v.x) && (@y > v.y);

    zero: vec2(0, 0);
    one: vec2(1, 1);
    right: vec2(1, 0);
    left: vec2(-1, 0);
    up: vec2(0, -1);
    down: vec2(0, 1);

    square_magnitude: () :=> >> => (@x * @x) + (@y * @y);
    magnitude: () :=> >> => math.sqrt @square_magnitude!;
    angle: () :=> math.atan2(@y,@x);

    clamp: with {
        (a: number | vec2) :=> match (let t = type a) {
            t == "number" => {
                clamp_x a;
                clamp_y a;
            },
            t == "table" =>{
                clamp_x a.x;
                clamp_y a.y;
            },
            else @
        };
        (min: number | vec2, max: number | vec2) :=> {
            if type min == "number", min = @one * min;
            if type max == "number", max = @one * max;
            clamp_x(min.x, max.x);
            clamp_y(min.y, max.y);
        };
    };
    clamp_min: (a: number | vec2) :=> {
        if type a == "number", a = @one * a;
        if @x < a.x, @x = a.x;
        if @y < a.y, @y = a.y;
    };
    clamp_x: with {
        (x: number) :=> >> if @x > x, @x = x;
        (min: number, max: number) :=> >>
            if @x > max, @x = max else if @x < min, @x = min;
    };
    clamp_y: with {
        (y: number) :=> >> if @y > y, @y = y;
        (min: number, max: number) :=> >>
            if @y > max, @y = max else if @y < min, @y = min;
    };

    split: () :=> (@x, @y);
    floor: () :=> vec2(math.floor @x, math.floor @y);
    lerp: (v:vec2, f:float) :=> @ + ((v - @) * f);
};
export vec2;