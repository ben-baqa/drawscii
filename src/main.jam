use "conf.jam";

use "std/array.jam";
use "std/string.jam";
use "std/iter.jam";

use "textGrid.jam";
use "vec2.jam";
use "ui.jam";

let g = love.graphics;
let m = love.mouse;

let frameRate = 60;
let m_pos = vec2(m.getX!, m.getY!);

let fullscreen = false;

let grid = textGrid(25, 25, 600, 750, 55, 32, 0.35);
let ui = ui!;
ui.elements.copy.on_press = () :=> {
    print grid;
    love.system.setClipboardText(grid:__tostring!);
};


love.load = () => {
    -- g.setDefaultFilter("nearest", "nearest", 1);
    g.setNewFont(FONT_LOCATION, FONT_SIZE);
    frameRate = 60;
};

love.update = delta => {
    frameRate = frameRate + (1 / delta - frameRate * 0.05);

    m_pos = vec2(m.getX!, m.getY!);
    let m_down = m.isDown 1;
    -- if m_down, grid:assign(m_pos, STRENGTH);
    
    if m_down, grid:write(m_pos, STRENGTH, BRUSH_SIZE);
    ui:update m_pos;
};

love.draw = () => {
    g.setColor(1, 1, 1);
    -- g.print(string.format("%.2f", frameRate), 5, 5);
    -- g.print(m_pos:__tostring!, 325, 5);
    g.circle("line", m_pos.x, m_pos.y, BRUSH_SIZE, BRUSH_SIZE);

    ui:draw!;
    grid:draw!;
};

love.mousepressed = (x, y, button, istouch) => ui:on_click!;
love.mousereleased = (x, y, button, istouch) => ui:off_click!;